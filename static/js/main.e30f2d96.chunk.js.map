{"version":3,"sources":["views/media.js","views/PreorderView.js","App.js","serviceWorker.js","index.js"],"names":["Media","name","tags","images","sort","a","b","localeCompare","_tagFilter","tag","item","some","RootView","props","state","selected","maxImageWidth","all","g10","filter","naturals","synthetics","micarta","wood","zoomIn","this","newValue","setState","button","type","text","Button","variant","onClick","className","ButtonGroup","zoom","styles","map","image","style","alt","small","large","hideDownload","hideZoom","media","renderImages","renderToolbar","renderMedia","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e30f2d96.chunk.js","sourcesContent":["export const Media = [\n    {\n        name: 'Antique Stag Bone',\n        tags: ['naturals'],\n        images: [\n            'antique-stag-bone-1.jpg',\n        ]\n    },\n    {\n        name: 'Burgundy Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-burgundy-2.jpg',\n            'burlap-micarta-burgundy-1.jpg',\n        ]\n    },\n    {\n        name: 'Coffeebag Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-coffeebag-1.jpg',\n        ]\n    },\n    {\n        name: 'Drunken Coffeebag Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-drunken-coffeebag-1.jpg',\n        ]\n    },\n    {\n        name: 'Evergreen Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-evergreen-1.jpg',\n        ]\n    },\n    {\n        name: 'Forest Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-forest-1.jpg',\n        ]\n    },\n    {\n        name: 'Lime Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-lime-1.jpg',\n        ]\n    },\n    {\n        name: 'Midnite Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-midnite-2.jpg',\n            'burlap-micarta-midnite-1.jpg',\n        ]\n    },\n    {\n        name: 'Navy Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-navy-1.jpg',\n        ]\n    },\n    {\n        name: 'Orange Fire Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-orange-fire-1.jpg',\n            'burlap-micarta-orange-fire-2.jpg',\n            'burlap-micarta-orange-fire-3.jpg',\n        ]\n    },\n    {\n        name: 'Oreo Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-oreo-1.jpg',\n            'burlap-micarta-oreo-2.jpg',\n        ]\n    },\n    {\n        name: 'Royal and Gold Flecked Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-royal-and-gold-1.jpg',\n        ]\n    },\n    {\n        name: 'Sandstone Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-sandstone-1.jpg',\n        ]\n    },\n    {\n        name: 'Smoke Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-smoke-1.jpg',\n        ]\n    },\n    {\n        name: 'Tan Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-tan-1.jpg',\n        ]\n    },\n    {\n        name: 'Terracotta Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-terracotta-1.jpg',\n        ]\n    },\n    {\n        name: 'Toxic Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-toxic-1.jpg',\n        ]\n    },\n    {\n        name: 'Turquoise Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-turquoise-1.jpg',\n        ]\n    },\n    {\n        name: 'Vintage Bone Burlap Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'burlap-micarta-vintage-bone-1.jpg',\n        ]\n    },\n    {\n        name: 'Black Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-black-1.jpg',\n            'canvas-micarta-black-2.jpg',\n        ]\n    },\n    {\n        name: 'Brown Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-brown-1.jpg',\n        ]\n    },\n    {\n        name: 'Burgundy Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-burgundy-2.jpg',\n            'canvas-micarta-burgundy-1.jpg',\n        ]\n    },\n    {\n        name: 'Firedog Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-firedog-1.jpg',\n        ]\n    },\n    {\n        name: 'Green Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-green-1.jpg',\n        ]\n    },\n    {\n        name: 'Natural Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-natural-1.jpg',\n        ]\n    },\n    {\n        name: 'Snakeskin Burgundy Canvas Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'canvas-micarta-snakeskin-burgundy-1.jpg',\n        ]\n    },\n    {\n        name: 'Black Carbon Fiber',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'carbon-fiber-black-2.jpg',\n            'carbon-fiber-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Black C-Tek',\n        tags: ['synthetics'],\n        images: [\n            'ctek-black-2.jpg',\n            'ctek-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Red C-Tek',\n        tags: ['synthetics'],\n        images: [\n            'ctek-red-1.jpeg',\n        ]\n    },\n    {\n        name: 'Blue Cyclone Mesh',\n        tags: ['synthetics'],\n        images: [\n            'cyclone-mesh-blue-1.jpg',\n        ]\n    },\n    {\n        name: 'Green Cyclone Mesh',\n        tags: ['synthetics'],\n        images: [\n            'cyclone-mesh-green-1.jpg',\n        ]\n    },\n    {\n        name: 'Red Cyclone Mesh',\n        tags: ['synthetics'],\n        images: [\n            'cyclone-mesh-red-1.jpg',\n        ]\n    },\n    {\n        name: 'Amber Sea Dragon Scale',\n        tags: ['synthetics'],\n        images: [\n            'dragon-scale-amber-sea-1.jpg',\n        ]\n    },\n    {\n        name: 'Arctic Dragon Scale',\n        tags: ['synthetics'],\n        images: [\n            'dragon-scale-arctic-1.jpg',\n        ]\n    },\n    {\n        name: 'Borealis Dragon Scale',\n        tags: ['synthetics'],\n        images: [\n            'dragon-scale-borealis-1.jpg',\n        ]\n    },\n    {\n        name: 'Mystic Dragon Scale',\n        tags: ['synthetics'],\n        images: [\n            'dragon-scale-mystic-1.jpg',\n        ]\n    },\n    {\n        name: 'Ruby Frost Dragon Scale',\n        tags: ['synthetics'],\n        images: [\n            'dragon-scale-ruby-frost-1.jpg',\n        ]\n    },\n    {\n        name: 'Sunfire Dragon Scale',\n        tags: ['synthetics'],\n        images: [\n            'dragon-scale-sunfire-1.jpg',\n        ]\n    },\n    {\n        name: 'Black G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Blaze Orange G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-blaze-orange-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue and Black G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-blue-and-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue Glow G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-blue-glow-1.jpg',\n        ]\n    },\n    {\n        name: 'Coyote Brown G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-coyote-brown-1.jpg',\n        ]\n    },\n    {\n        name: 'Forest Green G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-forest-green-1.jpg',\n        ]\n    },\n    {\n        name: 'Ghost Green Jade G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-ghost-green-jade-1.jpg',\n        ]\n    },\n    {\n        name: 'Midnite Tiger G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-midnite-tiger-1.jpg',\n        ]\n    },\n    {\n        name: 'Mil-Spec Camo G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-mil-spec-camo-1.jpg',\n        ]\n    },\n    {\n        name: 'Pink G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-pink-1.jpg',\n        ]\n    },\n    {\n        name: 'Ranger Green G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-ranger-green-1.jpg',\n        ]\n    },\n    {\n        name: 'Red G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-red-1.jpg',\n        ]\n    },\n    {\n        name: 'Tigerstripe G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-tigerstripe-1.jpg',\n            'g10-tigerstripe-2.jpg',\n            'g10-tigerstripe-3.jpg',\n        ]\n    },\n    {\n        name: 'White G-10',\n        tags: ['synthetics', 'g10'],\n        images: [\n            'g10-white-1.jpg',\n        ]\n    },\n    {\n        name: 'Impala',\n        tags: ['naturals'],\n        images: [\n            'impala-1.jpg',\n        ]\n    },\n    {\n        name: 'Antique Bone Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-antique-bone-1.jpg',\n        ]\n    },\n    {\n        name: 'Black Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-black-1.jpg',\n            'linen-micarta-black-2.jpg',\n        ]\n    },\n    {\n        name: 'Black and Green Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-black-and-green-1.jpg',\n        ]\n    },\n    {\n        name: 'Green Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-green-1.jpg',\n            'linen-micarta-green-2.jpg',\n        ]\n    },\n    {\n        name: 'Red Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-red-2.jpg',\n            'linen-micarta-red-1.jpg',\n        ]\n    },\n    {\n        name: 'Red and Black Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-red-and-black-1.jpg',\n            'linen-micarta-red-and-black-2.jpg',\n        ]\n    },\n    {\n        name: 'White Linen Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'linen-micarta-white-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue and Black Lizard Skin',\n        tags: ['synthetics'],\n        images: [\n            'lizardskin-blue-and-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue and White Lizard Skin',\n        tags: ['synthetics'],\n        images: [\n            'lizardskin-blue-and-white-1.jpg',\n        ]\n    },\n    {\n        name: 'Green and Black Lizard Skin',\n        tags: ['synthetics'],\n        images: [\n            'lizardskin-green-and-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Orange and Black Lizard Skin',\n        tags: ['synthetics'],\n        images: [\n            'lizardskin-orange-and-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Red and Black Lizard Skin',\n        tags: ['synthetics'],\n        images: [\n            'lizardskin-red-and-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue Denim Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'micarta-blue-denim-1.jpg',\n        ]\n    },\n    {\n        name: 'Bone White Micarta',\n        tags: ['synthetics', 'micarta'],\n        images: [\n            'micarta-bone-white-1.jpg',\n        ]\n    },\n    {\n        name: 'Black Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-black-1.jpg',\n        ]\n    },\n    {\n        name: 'Black and White Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-black-and-white-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue and Copper Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-blue-and-copper-1.jpg',\n        ]\n    },\n    {\n        name: 'Emerald Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-emerald-1.jpg',\n        ]\n    },\n    {\n        name: 'Glow-in-the-dark Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-glow-in-the-dark-1.jpg',\n        ]\n    },\n    {\n        name: 'Red Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-red-1.jpg',\n        ]\n    },\n    {\n        name: 'Teal Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-teal-1.jpg',\n        ]\n    },\n    {\n        name: 'White Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-white-1.jpg',\n        ]\n    },\n    {\n        name: 'Yellow and Orange Pinecone',\n        tags: ['naturals', 'pinecone'],\n        images: [\n            'pinecone-yellow-and-orange-1.jpg',\n        ]\n    },\n    {\n        name: 'Rough Out Buffalo',\n        tags: ['naturals'],\n        images: [\n            'rough-out-buffalo-1.jpg',\n        ]\n    },\n    {\n        name: 'Smoothe Bone',\n        tags: ['naturals'],\n        images: [\n            'smoothe-bone-1.jpg',\n        ]\n    },\n    {\n        name: 'Blue Texas Fencepost',\n        tags: ['naturals'],\n        images: [\n            'texas-fencepost-blue-1.jpg',\n        ]\n    },\n    {\n        name: 'Green Texas Fencepost',\n        tags: ['naturals'],\n        images: [\n            'texas-fencepost-green-1.jpg',\n        ]\n    },\n    {\n        name: 'Red Texas Fencepost',\n        tags: ['naturals'],\n        images: [\n            'texas-fencepost-red-1.jpg',\n        ]\n    },\n    {\n        name: 'Turquoise Texas Fencepost',\n        tags: ['naturals'],\n        images: [\n            'texas-fencepost-turquoise-1.jpg',\n        ]\n    },\n    {\n        name: 'White Texas Fencepost',\n        tags: ['naturals'],\n        images: [\n            'texas-fencepost-white-1.jpg',\n        ]\n    },\n    {\n        name: 'American Walnut',\n        tags: ['wood'],\n        images: [\n            'wood-american-walnut-1.jpg',\n            'wood-american-walnut-2.jpg',\n        ]\n    },\n    {\n        name: 'Birdseye Maple',\n        tags: ['wood'],\n        images: [\n            'wood-birdseye-maple-1.jpg',\n            'wood-birdseye-maple-2.jpg',\n        ]\n    },\n    {\n        name: 'Black Ash Burl',\n        tags: ['wood'],\n        images: [\n            'wood-black-ash-burl-1.jpg',\n            'wood-black-ash-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Bocote',\n        tags: ['wood'],\n        images: [\n            'wood-bocote-1.jpg',\n            'wood-bocote-2.jpg',\n        ]\n    },\n    {\n        name: 'Dark Curly Maple',\n        tags: ['wood'],\n        images: [\n            'wood-dark-curly-maple-1.jpg',\n            'wood-dark-curly-maple-2.jpg',\n        ]\n    },\n    {\n        name: 'Natural Curly Maple',\n        tags: ['wood'],\n        images: [\n            'wood-natural-curly-maple-1.jpg',\n            'wood-natural-curly-maple-2.jpg',\n        ]\n    },\n    {\n        name: 'Desert Ironwood',\n        tags: ['wood'],\n        images: [\n            'wood-desert-ironwood-1.jpg',\n            'wood-desert-ironwood-2.jpg',\n        ]\n    },\n    {\n        name: 'Desert Ironwood Burl',\n        tags: ['wood'],\n        images: [\n            'wood-desert-ironwood-burl-1.jpg',\n            'wood-desert-ironwood-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Osage Orange',\n        tags: ['wood'],\n        images: [\n            'wood-osage-orange-1.jpg',\n            'wood-osage-orange-2.jpg',\n        ]\n    },\n    {\n        name: 'Wenge',\n        tags: ['wood'],\n        images: [\n            'wood-wenge-1.jpg',\n            'wood-wenge-2.jpg',\n        ]\n    },\n    {\n        name: 'Zebrawood',\n        tags: ['wood'],\n        images: [\n            'wood-zebrawood-1.jpg',\n            'wood-zebrawood-2.jpg',\n        ]\n    },\n    {\n        name: 'Zericote',\n        tags: ['wood'],\n        images: [\n            'wood-zericote-1.jpg',\n            'wood-zericote-2.jpg',\n        ]\n    },\n    {\n        name: 'Amboynia Burl',\n        tags: ['wood'],\n        images: [\n            'wood-amboynia-burl-1.jpg',\n            'wood-amboynia-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'California Buckeye Burl',\n        tags: ['wood'],\n        images: [\n            'wood-california-buckeye-burl-1.jpg',\n            'wood-california-buckeye-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Curly Koa Burl',\n        tags: ['wood'],\n        images: [\n            'wood-curly-koa-burl-1.jpg',\n            'wood-curly-koa-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Colored Elder Burl',\n        tags: ['wood'],\n        images: [\n            'wood-colored-elder-burl-1.jpg',\n            'wood-colored-elder-burl-2.jpg',\n            'wood-colored-elder-burl-3.jpg',\n        ]\n    },\n    {\n        name: 'Colored Maple Burl',\n        tags: ['wood'],\n        images: [\n            'wood-colored-maple-burl-1.jpg',\n            'wood-colored-maple-burl-2.jpg',\n            'wood-colored-maple-burl-3.jpg',\n        ]\n    },\n    {\n        name: 'Colored Tigertail Maple Burl',\n        tags: ['wood'],\n        images: [\n            'wood-colored-tigertail-maple-burl-1.jpg',\n            'wood-colored-tigertail-maple-burl-2.jpg',\n            'wood-colored-tigertail-maple-burl-3.jpg',\n        ]\n    },\n    {\n        name: 'Mesquite Burl',\n        tags: ['wood'],\n        images: [\n            'wood-mesquite-burl-1.jpg',\n            'wood-mesquite-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Natural Elder Burl',\n        tags: ['wood'],\n        images: [\n            'wood-natural-elder-burl-1.jpg',\n            'wood-natural-elder-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Natural Maple Burl',\n        tags: ['wood'],\n        images: [\n            'wood-natural-maple-burl-1.jpg',\n            'wood-natural-maple-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Spalted Maple Burl',\n        tags: ['wood'],\n        images: [\n            'wood-spalted-maple-burl-1.jpg',\n            'wood-spalted-maple-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Thuyla Burl',\n        tags: ['wood'],\n        images: [\n            'wood-thuyla-burl-1.jpg',\n            'wood-thuyla-burl-2.jpg',\n        ]\n    },\n    {\n        name: 'Walnut Burl',\n        tags: ['wood'],\n        images: [\n            'wood-walnut-burl-1.jpg',\n            'wood-walnut-burl-2.jpg',\n        ]\n    },\n];\n\nMedia.sort((a, b) => { return a.name.localeCompare(b.name); });\n","import React from 'react';\nimport { Media } from './media';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport ModalImage from 'react-modal-image';\n\nimport './PreorderView.scss';\n\nconst _tagFilter = (tag) => {\n    return (item) => {\n        return item.tags.some((item) => { return item === tag; });\n    };\n};\n\nexport default class RootView extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selected: 'all',\n            maxImageWidth: 400,\n            all: Media,\n            g10: Media.filter(_tagFilter('g10')),\n            naturals: Media.filter(_tagFilter('naturals')),\n            synthetics: Media.filter(_tagFilter('synthetics')),\n            micarta: Media.filter(_tagFilter('micarta')),\n            wood: Media.filter(_tagFilter('wood')),\n        };\n    }\n\n    zoom(zoomIn) {\n        const {\n            maxImageWidth,\n        } = this.state;\n\n        let newValue = maxImageWidth;\n\n        if (zoomIn) {\n            newValue = maxImageWidth + 50;\n        } else {\n            newValue = maxImageWidth - 50;\n            if (newValue < 200) {\n                newValue = 200;\n            }\n        }\n\n        this.setState({ maxImageWidth: newValue });\n    }\n\n    renderToolbar() {\n        const {\n            selected,\n        } = this.state;\n\n        const button = (type, text) => {\n            return (\n                <Button\n                    variant={selected === type ? 'primary' : 'secondary'}\n                    onClick={() => this.setState({ selected: type })}\n                >\n                { text }\n                </Button>\n            );\n        };\n\n        return (\n            <div className=\"toolbar\">\n                <div className=\"toolbar-group\">\n                    <ButtonGroup>\n                        { button('all', 'All') }\n                        { button('g10', 'G-10') }\n                        { button('micarta', 'Micarta') }\n                        { button('wood', 'Wood') }\n                        { button('naturals', 'Naturals') }\n                        { button('synthetics', 'Synthetics') }\n                    </ButtonGroup>\n                </div>\n\n                <div className=\"toolbar-group\">\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => this.zoom(true)}\n                    >\n                        Zoom In\n                    </Button>\n                    <Button\n                        variant=\"primary\"\n                        onClick={() => this.zoom(false)}\n                    >\n                        Zoom Out\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    renderImages(images) {\n        const {\n            maxImageWidth,\n        } = this.state;\n\n        const styles = { 'max-width': maxImageWidth };\n\n        return images.map((image) => {\n            return (\n                <div className=\"image-container\" style={styles}>\n                    <ModalImage\n                        alt={image.name}\n                        small={`images/${image}`}\n                        large={`images/${image}`}\n                        hideDownload={true}\n                        hideZoom={true}\n                    />\n                </div>\n            );\n        });\n    }\n\n    renderMedia() {\n        const {\n            selected,\n        } = this.state;\n\n        const media = this.state[selected];\n\n        return (\n            <div className=\"media\">\n                {\n                    media.map((item) => {\n                        return (\n                            <div className=\"media-row\">\n                                <div className=\"title\">\n                                    { item.name }\n                                </div>\n                                <div className=\"gallery\">\n                                    { this.renderImages(item.images) }\n                                </div>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"view preorder-view\">\n                { this.renderToolbar() }\n                { this.renderMedia() }\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport './App.scss';\n\nimport PreorderView from './views/PreorderView';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <PreorderView />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}